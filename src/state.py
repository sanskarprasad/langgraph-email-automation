from pydantic import BaseModel, Field
from typing import List
from typing_extensions import TypedDict

class Email(BaseModel):
    id: str = Field(..., description="Unique identifier of the email")
    sender: str = Field(..., description="Email address of the sender")
    subject: str = Field(..., description="Subject line of the email")
    body: str = Field(..., description="Body content of the email")

class GraphState(TypedDict):
    """
    Represents the state of the email processing graph.

    Attributes:
        emails (List[Email]): List of Email objects containing details of new emails.
        current_email (Email): The Email object currently being processed.
        email_category (str): Category of the current email (e.g., product enquiry, customer feedback).
        generated_email (str): Content of the email generated by the write agent.
        rag_questions (List[str]): List of questions designed for Retrieval-Augmented Generation (RAG).
        retrieved_documents (str): Documents retrieved from RAG to answer enquiry.
        review (str): Review result of the generated email (send or rewrite).
        trials (int): Number of draft trials attempted before stopping.
    """
    emails: List[Email]
    current_email: Email
    email_category: str
    generated_email: str
    rag_questions: List[str]
    retrieved_documents: str
    review: str
    trials: int